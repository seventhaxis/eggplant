function addedTo xInt, yInt
	return performCalculation(yInt, "add", xInt)
end addedTo


// Validates default and hover states for all numpad buttons.
on checkNumpad
	moveTo [0, 0]
	repeat for each item number in (0..9 as a list)
		put !"numpad/[[number]]/" into targetButton
		moveTo targetButton & "default/"
		waitFor 5.0, targetButton & "hover/"
		log !"Validated the button states for the '[[number]]' button."
	end repeat
	
	logSuccess "Validated numpad button states."
end checkNumpad


// Validates default and hover states for all operator buttons.
on checkOperators
	moveTo [0, 0]
	put ["divide", "multiply", "subtract", "add", "equals"] into calcOperators
	repeat for each item operator in calcOperators
		put !"operators/[[operator]]/" into targetOperator
		moveTo targetOperator & "default/"
		waitFor 5.0, targetOperator & "hover/"
		log !"Validated the button states for the '[[operator]]' button."
	end repeat
	
	logSuccess "Validated operator button states."
end checkOperators


// Searches for and clicks the INACTIVE Windows taskbar icon for the calculator.
on clickInactiveTaskbarIcon
	put helpers.taskbarRectangle() into taskbarRect
	click(image: "taskbar_icon/inactive/", searchRectangle: taskbarRect)
end clickInactiveTaskbarIcon


// Closes all instances of calculator through the taskbar icon's right-click menu.
on closeProgram
	put helpers.taskbarRectangle() into taskbarRect
	if imageFound(image: "taskbar_icon/active/", waitFor: 0, searchRectangle: taskbarRect)
		rightClick foundImageLocation()
		
		
		// restrict search rectangle to right-click menu (rough estimate)
		put foundImageLocation() + [-125, -250] into topLeftAnchor
		put foundImageLocation() + [125, 0] into botRightAnchor
		put [topLeftAnchor, botRightAnchor] into rightClickMenuRect
		
		if imageFound(text: "Close all windows", caseSensitive: true, waitFor: 3.0, searchRectangle: rightClickMenuRect)
			click foundImageLocation()
		else
			click{text: "Close window", caseSensitive: true, waitFor: 0, searchRectangle: rightClickMenuRect}
		end if
	end if
end closeProgram


// Returns the value currently displayed on system calculator.
to displayedValue
	return readText(resultsRectangle(), validCharacters: "0123456789e,.-+", contrast: on, contrastColor: "#000000")
end displayedValue


function dividedBy xInt, yInt
	return performCalculation(xInt, "divide", yint)
end dividedBy


// Enters each individual digit of the defined number into the system calculator.
on enterNumber digits
	put each character of digits as text into digitList
	repeat for each item digit of digitList
		if digit is a number then pressNumber digit
		else pressDecimalButton
	end repeat
end enterNumber


// Launches the calculator by clicking on the pinned taskbar icon.
-- Prerequisite: program is closed and icon is pinned to taskbar
on launchProgram
	clickInactiveTaskbarIcon
	
	// two-element validation to ensure calculator appears on-screen
	assert that imageFound(image: "menu_button/", waitFor: 5.0)
	put foundImageLocation() into menuButtonLocation
	
	assert that imageFound(image: "memory_store_button/", waitFor: 0.0)
	put foundImageLocation() into memoryButtonLocation
	if [memoryButtonLocation.x - menuButtonLocation.x] does NOT equal 342 then resizeProgramWindow

	restrictSearchRectangleToProgramWindow
end launchProgram


function multipliedBy xInt, yInt
	return performCalculation(yInt, "multiply", xInt)
end multipliedBy


// Performs the defined calculation against the calculator, returning the result displayed on-screen.
-- Examples:
--  log performCalculation(2, "add", 14)
--  log performCalculation(5, "subtract", 8)
--  log performCalculation(60, "divide", 1.5)
--  log performCalculation(9, "multiply", 4)
function performCalculation xInt, targetOperator, yInt
	enterNumber xInt
	pressOperator targetOperator
	enterNumber yInt
	pressOperator "equals"
	return displayedValue()
end performCalculation


on pressClearButton
	put "clear_button/" into clearButton
	click clearButton
end pressClearButton


on pressDecimalButton
	put "decimal_button/" into decimalButton
	click decimalButton
end pressDecimalButton


on pressNumber targetNumber
	put "numpad/" & targetNumber into numberButton
	click numberButton
end pressNumber


// Presses the defined operator button, regardless of state.
on pressOperator targetOperator
	put "operators/" & targetOperator into operatorButton
	click operatorButton
end pressOperator


// Resizes calculator program to reduce test failures due to scaling mismatches.
on resizeProgramWindow
	restoreProgramWindow
	
	put "close_window_button/" into closeButton
	put imageLocation(closeButton) into closeButtonLoc
	
	// find the right-side of program by looking for History tab
	if imageFound(image: "history_tab/", waitFor: 0) // use close button as reference
		put closeButtonLoc + [25, 50] into rightEdge
	else	 // use history button as reference
		put imageLocation("history_button/") + [20, 0] into rightEdge
	end if
	
	// if necessary, drag right edge to proper width
	put imageLocation("menu_button/") into menuButtonLoc
	if [rightEdge.x - menuButtonLoc.x] is NOT equal to 535
		put [menuButtonLoc.x + 535, rightEdge.y] into desiredWidth
		drag rightEdge
		drop desiredWidth
	end if
	
	// get current location for title bar
	put imageLocation(closeButton) into closeButtonLoc
	put closeButtonLoc + [-200, 0] into titleBarLoc
	
	// store location of draggable top edge of program
	put imageRectangle(closeButton).topLeft + [-100, 0] into topEdge
	put [remoteScreenSize().x / 2, 100] into topMiddle
	
	put "numpad/0/" into numpadZero
	put imageLocation(image: numpadZero, waitFor: 0) into numpadZeroLoc
	if numpadZeroLoc.y is NOT 950 // reposition according to zero button's location
		put 950 - numpadZeroLoc.y into deltaV
		put [topMiddle.x, topEdge.y + deltaV] into desiredtitleBarLoc
		drag titleBarLoc
		drop desiredtitleBarLoc
		
		put imageRectangle(closeButton).topLeft + [-100, 0] into topEdge
		put imageLocation(image: numpadZero, waitFor: 0) into numpadZeroLoc
	end if
	
	put [topEdge.x, numpadZeroLoc.y - 800] into desiredHeight
	drag topEdge
	drop desiredHeight
end resizeProgramWindow


// Restores calculator window (if possible).
on restoreProgramWindow
	put remoteScreenSize() into screenResolution
	put [screenResolution.x * 11/12, 0] into topLeftAnchor
	put [screenResolution.x, 50] into bottomRightAnchor
	put [topLeftAnchor, bottomRightAnchor] into topRightCorner
	
	if imageFound(image: "restore_window_button/", searchRectangle: topRightCorner, waitFor: 0) then click foundImageLocation()
	
	assert that imageFound(image: "maximize_window_button/", waitFor: 5.0)
end restoreProgramWindow


// Sets the global searchRectangle property to rectangle for calculator program window.
on restrictSearchRectangleToProgramWindow
	logWarning "TODO: This should be changed to return a rectangle instead of using global property."
	
	put imageLocation(text: "Calculator", caseSensitive: yes) into titleBarLocation
	put titleBarLocation + [-35, -15] into topLeftAnchor
	put imageLocation("close_window_button/").x + 20 into rightAnchor
	put imageLocation("operators/equals/").y + 45 into bottomAnchor
	put [rightAnchor, bottomAnchor] into bottomRightAnchor
	
	set the searchRectangle to [topLeftAnchor, bottomRightAnchor]
end restrictSearchRectangleToProgramWindow


// Returns a rectangle for the calculator's output area to be used in readText() calls.
function resultsRectangle
	put imageLocation("menu_button/") + [-15, 50] into topLeftAnchor
	put imageRectangle("history_button/").right into rightAnchor
	put imageRectangle("memory_store_button/").top - 10 into bottomAnchor
	put [rightAnchor, bottomAnchor] into bottomRightAnchor
	return [topLeftAnchor, bottomRightAnchor]
end resultsRectangle


function subtractedFrom xInt, yInt
	return performCalculation(yInt, "subtract", xInt)
end subtractedFrom